<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0074)http://www.oracle-base.com/articles/11g/PivotAndUnpivotOperators_11gR1.php -->
<?xml version="1.0" encoding="UTF-8"?><HTML xml:lang="en" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META content=uAot83aL1vrD5g/g/QBf4MG+KDjZalEb9GmH1gST4vI= name=verify-v1><LINK 
href="/favicon.ico" type=image/x-icon rel="shortcut icon"><!-- End of HtmlHeader.php --><!-- Start of Title and Meta -->
<META 
content="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1" 
name=description>
<META content="oracle, 11g, pivot, unpivot, operator, new features" 
name=keywords>
<META content="index, follow" name=robots><!-- End of Title and Meta --><!-- Start of PageHeader.php --><LINK 
title=Default 
href="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/Default.css" 
type=text/css rel=stylesheet><LINK title=HighContrast 
href="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/HighContrast.css" 
type=text/css rel=stylesheet><LINK title=Inverted 
href="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/Inverted.css" 
type=text/css rel=stylesheet>
<SCRIPT 
src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/switcher.js" 
type=text/javascript></SCRIPT>

<META content="MSHTML 6.00.2900.3698" name=GENERATOR></HEAD>
<BODY>
<DIV id=container>
<DIV id=top>
<TABLE style="WIDTH: 100%; TEXT-ALIGN: center; border-spacing: 0px">
  <TBODY>
  <TR>
    <TD style="VERTICAL-ALIGN: bottom; TEXT-ALIGN: left"><A 
      href="http://www.oracle-base.com/index.php"><IMG 
      style="WIDTH: 243px; HEIGHT: 43px" alt="" 
      src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/site_logo.gif"></A> 
    </TD>
    <TD style="VERTICAL-ALIGN: middle; WIDTH: 735px; TEXT-ALIGN: right">
      <SCRIPT type=text/javascript><!--
        google_ad_client = "pub-9901106718381505";
        /* Site, Top, 4-Link-Unit */
        google_ad_slot = "4844118131";
        google_ad_width = 468;
        google_ad_height = 15;
        //-->
        </SCRIPT>

      <SCRIPT 
      src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/show_ads.js" 
      type=text/javascript>
        </SCRIPT>
    </TD></TR></TBODY></TABLE></DIV><!-- top -->
<DIV id=tabs>
<UL>
  <LI>
  <UL>
    <LI><A href="http://www.oracle-base.com/index.php">Home</A> 
    <LI><A class=active 
    href="http://www.oracle-base.com/articles/Articles.php">Articles</A> 
    <LI><A href="http://www.oracle-base.com/dba/DBACategories.php">Scripts</A> 
    <LI><A href="http://www.oracle-base.com/forums/">Forums</A> 
    <LI><A href="http://www.oracle-base.com/blog/">Blog</A> 
    <LI><A 
    href="http://www.oracle-base.com/misc/OCPCertification.php">Certification</A> 

    <LI><A href="http://www.oracle-base.com/misc/Miscellaneous.php">Misc</A> 
    <LI><A href="http://www.oracle-base.com/search">Search</A> 
    <LI><A href="http://www.oracle-base.com/misc/SiteInfo.php">About</A> 
    <LI><A 
    href="http://www.oracle-base.com/articles/11g/PivotAndUnpivotOperators_11gR1.php?display_type=printable">Printer 
    Friendly</A> </LI></UL></LI></UL></DIV><!-- tabs-->
<DIV id=subtabs><A href="http://www.oracle-base.com/articles/8i">Oracle 8i</A> | 
<A href="http://www.oracle-base.com/articles/9i">Oracle 9i</A> | <A 
href="http://www.oracle-base.com/articles/10g">Oracle 10g</A> | <A 
href="http://www.oracle-base.com/articles/11g">Oracle 11g</A> | <A 
href="http://www.oracle-base.com/articles/misc">Miscellaneous</A> | <A 
href="http://www.oracle-base.com/articles/rac">Oracle RAC</A> | <A 
href="http://www.oracle-base.com/articles/apps">Oracle Apps</A> | <A 
href="http://www.oracle-base.com/articles/linux">Linux</A> <BR></DIV><!-- subtabs-->
<DIV id=breadcrumbs>
<TABLE style="WIDTH: 100%">
  <TBODY>
  <TR>
    <TD><A href="http://www.oracle-base.com/">Home</A> &raquo; <A 
      href="http://www.oracle-base.com/articles">Articles</A> &raquo; <A 
      href="http://www.oracle-base.com/articles/11g">11g</A> &raquo; Here<BR></TD>
    <TD>
      <DIV>
      <FORM id=cse-search-box 
      action=http://www.oracle-base.com/misc/SearchResults.php>
      <DIV><INPUT type=hidden value=partner-pub-9901106718381505:bzx4c3-6cgr 
      name=cx> <INPUT type=hidden value=FORID:10 name=cof> <INPUT type=hidden 
      value=ISO-8859-1 name=ie> <INPUT size=31 name=q> <INPUT type=submit value=Search name=sa> 
</DIV></FORM></DIV></TD></TR></TBODY></TABLE></DIV><!-- navbar -->
<DIV id=content>
<DIV style="FLOAT: right">
<SCRIPT type=text/javascript><!--
      google_ad_client = "pub-9901106718381505";
      /* Article, Top, 336x280 */
      google_ad_slot = "2858304370";
      google_ad_width = 336;
      google_ad_height = 280;
      //-->
      </SCRIPT>

<SCRIPT 
src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/show_ads.js" 
type=text/javascript>
      </SCRIPT>
</DIV><!-- End of PageHeader.php --><!-- Start of Content --><A id=Top></A>
<H1>PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1</H1>
<UL>
  <LI><A 
  href="http://www.oracle-base.com/articles/11g/PivotAndUnpivotOperators_11gR1.php#pivot">PIVOT</A> 

  <LI><A 
  href="http://www.oracle-base.com/articles/11g/PivotAndUnpivotOperators_11gR1.php#unpivot">UNPIVOT</A> 
  </LI></UL><A id=pivot></A>
<H2>PIVOT</H2>The <CODE>PIVOT</CODE> operator takes data in separate rows, 
aggregates it and converts it into columns. To see the <CODE>PIVOT</CODE> 
operator in action we need to create a test table.<BR>
<BLOCKQUOTE><PRE>CREATE TABLE pivot_test (
  id            NUMBER,
  customer_id   NUMBER,
  product_code  VARCHAR2(5),
  quantity      NUMBER
);

INSERT INTO pivot_test VALUES (1, 1, 'A', 10);
INSERT INTO pivot_test VALUES (2, 1, 'B', 20);
INSERT INTO pivot_test VALUES (3, 1, 'C', 30);
INSERT INTO pivot_test VALUES (4, 2, 'A', 40);
INSERT INTO pivot_test VALUES (5, 2, 'C', 50);
INSERT INTO pivot_test VALUES (6, 3, 'A', 60);
INSERT INTO pivot_test VALUES (7, 3, 'B', 70);
INSERT INTO pivot_test VALUES (8, 3, 'C', 80);
INSERT INTO pivot_test VALUES (9, 3, 'D', 90);
INSERT INTO pivot_test VALUES (10, 4, 'A', 100);
COMMIT;</PRE></BLOCKQUOTE>So our test data starts off looking like this.<BR>
<BLOCKQUOTE><PRE>SELECT * FROM pivot_test;

        ID CUSTOMER_ID PRODU   QUANTITY
---------- ----------- ----- ----------
         1           1 A             10
         2           1 B             20
         3           1 C             30
         4           2 A             40
         5           2 C             50
         6           3 A             60
         7           3 B             70
         8           3 C             80
         9           3 D             90
        10           4 A            100

10 rows selected.

SQL&gt;</PRE></BLOCKQUOTE>In its basic form the <CODE>PIVOT</CODE> operator is 
quite limited. We are forced to list the required values to <CODE>PIVOT</CODE> 
using the IN clause.<BR>
<BLOCKQUOTE><PRE>SELECT *
FROM   (SELECT product_code, quantity
        FROM   pivot_test)
PIVOT  (SUM(quantity) AS sum_quantity FOR (product_code) IN ('A' AS a, 'B' AS b, 'C' AS c));

A_SUM_QUANTITY B_SUM_QUANTITY C_SUM_QUANTITY
-------------- -------------- --------------
           210             90            160

1 row selected.

SQL&gt;</PRE></BLOCKQUOTE>If we want to break it down by customer, we simply 
include the <CODE>CUSTOMER_ID</CODE> column in the initial select list.<BR>
<BLOCKQUOTE><PRE>SELECT *
FROM   (SELECT customer_id, product_code, quantity
        FROM   pivot_test)
PIVOT  (SUM(quantity) AS sum_quantity FOR (product_code) IN ('A' AS a, 'B' AS b, 'C' AS c))
ORDER BY customer_id;

CUSTOMER_ID A_SUM_QUANTITY B_SUM_QUANTITY C_SUM_QUANTITY
----------- -------------- -------------- --------------
          1             10             20             30
          2             40                            50
          3             60             70             80
          4            100

4 rows selected.

SQL&gt;</PRE></BLOCKQUOTE>Adding the <CODE>XML</CODE> keyword to the 
<CODE>PIVOT</CODE> operator allows us to convert the generated pivot results to 
XML format. It also makes the <CODE>PIVOT</CODE> a little more flexible, 
allowing us to replace the hard coded IN clause with a subquery, or the ANY 
wildcard. 
<BLOCKQUOTE><PRE>SET LONG 10000

SELECT *
FROM   (SELECT product_code, quantity
        FROM   pivot_test)
PIVOT XML (SUM(quantity) AS sum_quantity FOR (product_code) IN (SELECT DISTINCT product_code 
                                                                FROM   pivot_test
                                                                WHERE  id &lt; 10));

product_code_XML
----------------------------------------------------------------------------------------------------
&lt;PivotSet&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;A&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;210&lt;/column&gt;&lt;/
item&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;B&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;90&lt;/column&gt;&lt;/item&gt;&lt;
item&gt;&lt;column name = "PRODUCT_CODE"&gt;C&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;160&lt;/column&gt;&lt;/item&gt;&lt;item&gt;
&lt;column name = "PRODUCT_CODE"&gt;D&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;90&lt;/column&gt;&lt;/item&gt;&lt;/PivotSet&gt;

1 row selected.

SQL&gt;

SELECT *
FROM   (SELECT product_code, quantity
        FROM   pivot_test)
PIVOT XML (SUM(quantity) AS sum_quantity FOR (product_code) IN (ANY));

product_code_XML
----------------------------------------------------------------------------------------------------
&lt;PivotSet&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;A&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;210&lt;/column&gt;&lt;/
item&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;B&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;90&lt;/column&gt;&lt;/item&gt;&lt;
item&gt;&lt;column name = "PRODUCT_CODE"&gt;C&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;160&lt;/column&gt;&lt;/item&gt;&lt;item&gt;
&lt;column name = "PRODUCT_CODE"&gt;D&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;90&lt;/column&gt;&lt;/item&gt;&lt;/PivotSet&gt;

1 row selected.

SQL&gt;</PRE></BLOCKQUOTE>Once again, the results can be broken down by 
customer, with each customers XML presented as a separate row.<BR>
<BLOCKQUOTE><PRE>SET LONG 10000

SELECT *
FROM   (SELECT customer_id, product_code, quantity
        FROM   pivot_test)
PIVOT XML (SUM(quantity) AS sum_quantity FOR (product_code) IN (SELECT DISTINCT product_code 
                                                                FROM   pivot_test));

CUSTOMER_ID
-----------
PRODUCT_CODE_XML
----------------------------------------------------------------------------------------------------
          1
&lt;PivotSet&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;A&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;10&lt;/column&gt;&lt;/i
tem&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;B&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;20&lt;/column&gt;&lt;/item&gt;&lt;i
tem&gt;&lt;column name = "PRODUCT_CODE"&gt;C&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;30&lt;/column&gt;&lt;/item&gt;&lt;item&gt;&lt;c
olumn name = "PRODUCT_CODE"&gt;D&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;&lt;/column&gt;&lt;/item&gt;&lt;/PivotSet&gt;

          2
&lt;PivotSet&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;A&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;40&lt;/column&gt;&lt;/i
tem&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;B&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;&lt;/column&gt;&lt;/item&gt;&lt;ite

CUSTOMER_ID
-----------
PRODUCT_CODE_XML
----------------------------------------------------------------------------------------------------
m&gt;&lt;column name = "PRODUCT_CODE"&gt;C&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;50&lt;/column&gt;&lt;/item&gt;&lt;item&gt;&lt;col
umn name = "PRODUCT_CODE"&gt;D&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;&lt;/column&gt;&lt;/item&gt;&lt;/PivotSet&gt;

          3
&lt;PivotSet&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;A&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;60&lt;/column&gt;&lt;/i
tem&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;B&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;70&lt;/column&gt;&lt;/item&gt;&lt;i
tem&gt;&lt;column name = "PRODUCT_CODE"&gt;C&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;80&lt;/column&gt;&lt;/item&gt;&lt;item&gt;&lt;c
olumn name = "PRODUCT_CODE"&gt;D&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;90&lt;/column&gt;&lt;/item&gt;&lt;/PivotSet&gt;


CUSTOMER_ID
-----------
PRODUCT_CODE_XML
----------------------------------------------------------------------------------------------------
          4
&lt;PivotSet&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;A&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;100&lt;/column&gt;&lt;/
item&gt;&lt;item&gt;&lt;column name = "PRODUCT_CODE"&gt;B&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;&lt;/column&gt;&lt;/item&gt;&lt;it
em&gt;&lt;column name = "PRODUCT_CODE"&gt;C&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;&lt;/column&gt;&lt;/item&gt;&lt;item&gt;&lt;colu
mn name = "PRODUCT_CODE"&gt;D&lt;/column&gt;&lt;column name = "SUM_QUANTITY"&gt;&lt;/column&gt;&lt;/item&gt;&lt;/PivotSet&gt;


4 rows selected.

SQL&gt;</PRE></BLOCKQUOTE><A id=unpivot></A>
<H2>UNPIVOT</H2>The <CODE>UNPIVOT</CODE> operator converts column-based data 
into separate rows. To see the <CODE>UNPIVOT</CODE> operator in action we need 
to create a test table.<BR>
<BLOCKQUOTE><PRE>CREATE TABLE unpivot_test (
  id              NUMBER,
  customer_id     NUMBER,
  product_code_a  NUMBER,
  product_code_b  NUMBER,
  product_code_c  NUMBER,
  product_code_d  NUMBER
);

INSERT INTO unpivot_test VALUES (1, 101, 10, 20, 30, NULL);
INSERT INTO unpivot_test VALUES (2, 102, 40, NULL, 50, NULL);
INSERT INTO unpivot_test VALUES (3, 103, 60, 70, 80, 90);
INSERT INTO unpivot_test VALUES (4, 104, 100, NULL, NULL, NULL);
COMMIT;</PRE></BLOCKQUOTE>So our test data starts off looking like this.<BR>
<BLOCKQUOTE><PRE>SELECT * FROM unpivot_test;

        ID CUSTOMER_ID PRODUCT_CODE_A PRODUCT_CODE_B PRODUCT_CODE_C PRODUCT_CODE_D
---------- ----------- -------------- -------------- -------------- --------------
         1         101             10             20             30
         2         102             40                            50
         3         103             60             70             80             90
         4         104            100

4 rows selected.

SQL&gt;</PRE></BLOCKQUOTE>The <CODE>UNPIVOT</CODE> operator converts this 
column-based data into individual rows.<BR>
<BLOCKQUOTE><PRE>SELECT *
FROM   unpivot_test
UNPIVOT (quantity FOR product_code IN (product_code_a AS 'A', product_code_b AS 'B', product_code_c AS 'C', product_code_d AS 'D'));

        ID CUSTOMER_ID P   QUANTITY
---------- ----------- - ----------
         1         101 A         10
         1         101 B         20
         1         101 C         30
         2         102 A         40
         2         102 C         50
         3         103 A         60
         3         103 B         70
         3         103 C         80
         3         103 D         90
         4         104 A        100

10 rows selected.

SQL&gt;</PRE></BLOCKQUOTE>There are several things to note about the query:<BR>
<UL>
  <LI>The required column names, in this case <CODE>QUANTITY</CODE> and 
  <CODE>PRODUCT_CODE</CODE>, are define in the <CODE>UNPIVOT</CODE> clause. 
  These can be set to any name not currently in the driving table. 
  <LI>The columns to be unpivoted must be named in the <CODE>IN</CODE> clause. 
  <LI>The <CODE>PRODUCT_CODE</CODE> value will match the column name it is 
  derived from, unless you alias it to another value. 
  <LI>By default the <CODE>EXCLUDE NULLS</CODE> clause is used. To override the 
  default behaviour use the <CODE>INCLUDE NULLS</CODE> clause. </LI></UL>The 
following query shows the inclusion of the <CODE>INCLUDE NULLS</CODE> 
clause.<BR>
<BLOCKQUOTE><PRE>SELECT *
FROM   unpivot_test
UNPIVOT INCLUDE NULLS (quantity FOR product_code IN (product_code_a AS 'A', product_code_b AS 'B', product_code_c AS 'C', product_code_d AS 'D'));

        ID CUSTOMER_ID P   QUANTITY
---------- ----------- - ----------
         1         101 A         10
         1         101 B         20
         1         101 C         30
         1         101 D
         2         102 A         40
         2         102 B
         2         102 C         50
         2         102 D
         3         103 A         60
         3         103 B         70
         3         103 C         80

        ID CUSTOMER_ID P   QUANTITY
---------- ----------- - ----------
         3         103 D         90
         4         104 A        100
         4         104 B
         4         104 C
         4         104 D

16 rows selected.

SQL&gt;</PRE></BLOCKQUOTE>For more information see:<BR>
<UL>
  <LI><A 
  href="http://download.oracle.com/docs/cd/B28359_01/server.111/b28286/statements_10002.htm#CHDCEJJE">PIVOT</A> 

  <LI><A 
  href="http://download.oracle.com/docs/cd/B28359_01/server.111/b28286/statements_10002.htm#CHDJBHHI">UNPIVOT</A> 
  </LI></UL>Hope this helps. Regards Tim...<BR><BR><A 
href="http://www.oracle-base.com/articles/11g/PivotAndUnpivotOperators_11gR1.php#Top">Back 
to the Top.</A><BR><!-- End of Content --><!-- Start of PageFooter.php --></DIV><!-- content -->
<DIV id=footer>
<DIV class=center><BR><A 
href="http://www.oracle-base.com/misc/Comments.php?page_id=861">2 comments, 
read/add them...</A><BR>
<P><!-- AddThis Button BEGIN -->
<SCRIPT type=text/javascript>addthis_pub  = 'oraclebase';</SCRIPT>
<A onmouseover="return addthis_open(this, '', '[URL]', '[TITLE]')" 
onclick="return addthis_sendto()" onmouseout=addthis_close() 
href="http://www.addthis.com/bookmark.php"><IMG height=16 alt="" 
src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/button1-bm.gif" 
width=125></A>
<SCRIPT 
src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/addthis_widget.js" 
type=text/javascript></SCRIPT>
 <!-- AddThis Button END --></P>
<P><A href="http://www.oracle-base.com/index.php">Home</A> | <A 
href="http://www.oracle-base.com/articles/Articles.php">Articles</A> | <A 
href="http://www.oracle-base.com/dba/DBACategories.php">Scripts</A> | <A 
href="http://www.oracle-base.com/forums/">Forums</A> | <A 
href="http://www.oracle-base.com/blog/">Blog</A> | <A 
href="http://www.oracle-base.com/misc/OCPCertification.php">Certification</A> | 
<A href="http://www.oracle-base.com/misc/Miscellaneous.php">Misc</A> | <A 
href="http://www.oracle-base.com/misc/SiteInfo.php">About</A> </P>
<P><A href="http://validator.w3.org/check?uri=referer"><IMG height=31 
alt="Valid XHTML 1.1" 
src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/valid-xhtml11.png" 
width=88></A> &nbsp;&nbsp;&nbsp;&nbsp; <A class=subtle 
href="http://www.oracle-base.com/misc/SiteInfo.php#copyright">Copyright &amp; 
Disclaimer</A> &nbsp;&nbsp;&nbsp;&nbsp; <A 
href="http://jigsaw.w3.org/css-validator/check/referer"><IMG 
style="BORDER-RIGHT: 0px; BORDER-TOP: 0px; BORDER-LEFT: 0px; WIDTH: 88px; BORDER-BOTTOM: 0px; HEIGHT: 31px" 
alt="Valid CSS!" 
src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/vcss.gif"></A> 
</P></DIV><!-- center --></DIV><!-- footer --></DIV><!-- container --><!-- End of PageFooter.php --><!-- Start of HtmlFooter.php -->
<SCRIPT 
src="ORACLE-BASE - PIVOT and UNPIVOT Operators in Oracle Database 11g Release 1.files/urchin.js" 
type=text/javascript>
</SCRIPT>

<SCRIPT 
type=text/javascript>
_uacct = "UA-2100406-1";
urchinTracker();
</SCRIPT>
</BODY></HTML>
